
                                          # Coverpoints for U mode #

# this coverpoint is for ecall in Supervisor mode  
cp_U_ecall:
  config: 
    - check ISA:=regex(.*32.*); ISA:=regex(.*I.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True
  mnemonics: 
    ecall: 0
  val_comb:
  # for ecall
    mode ==  'U' and mnemonic == "ecall" and mcause == ${CAUSE_USER_ECALL} : 0
    
    
				# Illegal instruction exceptions coverpoints #

# This coverpoint will cover the illegal csr inappropriate csr and read only csr accesses, causing illegal instruction exceptions
cp_U_excp_illegal:   
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True
  mnemonics:
    "{csrrw, csrrs, csrrc, ecall}": 0
  val_comb:
  # for illegal csr
    mode ==  'U' and mnemonic == "csrrc" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0
    
  # for inappropriate csr
    mode ==  'U' and mnemonic == "csrrs" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0 
    
  # for read only csr
    mode ==  'U' and mnemonic == "csrrw" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0 
   
  # for mstatus_tvm bit enable
    mode == "U" and (mstatus & ${MSTATUS_TVM} == ${MSTATUS_TVM}) and mnemonic == "csrrw" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION}: 0
    
  # medeleg in S mode  
  #  mode == "U" and mnemonic == "ecall" and (${MSTATUS_MPP} & (${MSTATUS_MPP} << 1)) == 'S' and trap_return == 'S' and (medeleg & ${CSR_MEDELEG} == ${CSR_MEDELEG}) and mcause == ${CAUSE_USER_ECALL} : 0
    
    
					# Address misaligned exceptions coverpoints #
                        
# coverpoint for the load address misaligned
cp_U_load_addr_misaligned:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_mtrap_routine=True
  mnemonics:
    lw : 0
  val_comb:
    mode == 'U' and mnemonic == "lw" and mcause == ${CAUSE_MISALIGNED_LOAD} : 0
    
# coverpoint for the store address misaligned
cp_u_store_addr_misaligned:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    sw : 0
  val_comb:
    mode == 'U' and mnemonic == "sw" and mcause == ${CAUSE_MISALIGNED_STORE} : 0
    
   
   

