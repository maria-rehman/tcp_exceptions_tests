
    
#  mstatus TVM bit in M mode
m_mstatus_tvm_en:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;
  mnemonics:
    csrrw: 0
  csr_comb:
  #In M mode
    mode == 'M' and (mstatus & 0x00100000 == 0x00100000) and mnemonic == "csrrw" and satp != 0: 0
    
# When mstatus TVM bit is set, accessing satp and sfence.vma in S-Mode should raise illegal instruction fault.
s_mstatus_tvm_en:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True; def rvtest_strap_routine=True;
  mnemonics:
    csrrw: 0
  csr_comb:
  #In S mode
    mode == 'S' and (mstatus & 0x00100000 == 0x00100000) and mnemonic == "csrrw" and mcause == 0x2: 0
    
 
 
 
 
 
# Coverpoints for M mode #
# Environment call in M mode exceptions coverpoints #
# this coverpoint is for ecall in machine mode  
cp_M_ecall:
  config: 
    - check ISA:=regex(.*I.*); def rvtest_mtrap_routine=True 
  mnemonics: 
    ecall: 0
  val_comb:
  # for ecall
    mode ==  'M' and mnemonic == "ecall" and mcause == ${CAUSE_MACHINE_ECALL} : 0
    
                                 # Address illegal instruction exceptions coverpoints #

# This coverpoint will cover the illegal csr inappropriate csr and read only csr accesses, causing illegal instruction exceptions
cp_M_excp_illegal:   
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    "{csrrw, csrrs, csrrc, ecall}": 0
  val_comb:
  # for illegal csr
    mode ==  'M' and mnemonic == "csrrw" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0
    
  # for inappropriate csr
    mode ==  'M' and mnemonic == "csrrs" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0 
    
  # for read only csr
    mode ==  'M' and mnemonic == "csrrc" and mcause == ${CAUSE_ILLEGAL_INSTRUCTION} : 0 
    
  # When mstatus TVM bit is set, accessing satp and sfence.vma in M-Mode should not raise illegal instruction fault.
    mode == "M" and (mstatus & ${MSTATUS_TVM} == ${MSTATUS_TVM}) and mnemonic == "csrrw" and satp != 0: 0
  
  # this has to be checked and modified that wheather it is meeting the conditions or not   
  #  mode == "M" and mnemonic == "ecall" and mode_change == {'M to M'} and (medeleg & ${CSR_MEDELEG} == ${CSR_MEDELEG}) and mcause == ${CAUSE_MACHINE_ECALL} : 0
  
 
                                # Address misaligned exceptions coverpoints #
                        
# coverpoint for the load address misaligned
cp_M_load_addr_misaligned:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    lw : 0
  val_comb:
    mode == 'M' and mnemonic == "lw" and mcause == ${CAUSE_MISALIGNED_LOAD} : 0
    
# coverpoint for the store address misaligned
cp_M_store_addr_misaligned:
  config:
    - check ISA:=regex(.*32.*); check ISA:=regex(.*I.*Zicsr.*); def rvtest_mtrap_routine=True;
  mnemonics:
    sw : 0
  val_comb:
    mode == 'M' and mnemonic == "sw" and mcause == ${CAUSE_MISALIGNED_STORE} : 0
    
       
    
    
                                          # Coverpoints for S mode #

   
   
